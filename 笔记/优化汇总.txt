1,TDR
测试驱动需求。
起因：测试，开发，产品三方需求理解不一致。
一般测试阶段验出的bug,有30%的bug来自于测试人员与开发人员及产品人员对需求理解不一致而导致的，
或者需求本身就有问题，例如非闭环，逻辑冲突等。
原因一：测试，开发各自通过需求文档与产品人员的沟通，而开发人员与测试人员前期几乎没有沟通。
原因二：word文字描述很难表达整个app的层次结构与逻辑关系，从而会遗漏细节。
解决：使用TDR方案，由测试人员根据需求文档按模块编写tdr文档，tdr文档是一种带树形结构和逻辑关系的文档，在编写过程中，就开始发现并与产品人员一起解决需求漏洞，从而可以清楚的描述测试边界条件，逻辑关系。可以使用xmind工具。开发人员按照TDR文档结合需求文档进行开发。这可以极大帮助三方对于需求理解的问题。

关于APP开山的思考与建议：
由于这是app的开山篇，作为第一个版本，开发工作量和需求复杂度都是最高的，为了保障产品的质量与能够按时上线，建议在需求方面以精简，实现核心功能为主。后续版本做快速小版本迭代（两三周一个版本），逐步扩展功能与丰富体验。


2,邮件使用的建议
（1）邮件按开发小组，开发大组，产品团队等结构分组。
（2）比较重要的信息，通过分组发送邮件的方式通知大家，而非钉钉。
    例如需求文档，设计稿有更新的通知。会议纪要。产品提测。测试包发布。等场景。
    钉钉聊天群里面刷屏很快，重要信息容易被刷屏掉。

3,混合开发reactnative
  这个是我以前项目用到的技术，可以考虑在某个产品的某个模块使用，我可以提供帮助。

4,自动化测试
我们以前项目是测试团队开发自动化测试代码，包括自动化测试接口数据，monkey测试，使用第三方测试平台等。
这方面不知道测试团队是否具有这些技术能力，可以推动一下。

5,appstore审核
这是一个大坑，主要原因还是国内外文化不同，往往国内认为很正常的功能，苹果就是不让你审核通过，需要做好各种准备。如果运气不好，可能一两个月都无法审核通过，特别是app第一版，苹果会尤其审核严格。
举例以前遇到过的：
（1）封面的内容没有直观体现应用的内容。
（2）没有用户协议，没有举报机制。
（3）没有提供测试帐号密码。
（4）将非用户产生的内容存储到了icloud
（5）测试帐号的内容不全。（实际上是审核人员不知道如何使用测试帐号登陆）
（6）应用名字引起歧义。（审核人员认为“私密社交”是匿名发送内容的意思）
（7）提到其他平台的名字
（8）非实物交易必须使用ios内购ipa，不允许使用第三方支付。
（9）网络连接必须支持ipv6（这个原因拒了5-6次，非常重要，咱们的后台一定要支持ipv6）
（10）要求网络请求使用https，非强制，但是打包时候必须把所有非https请求地址加入白名单，否则会请求失败。所以我们要备案所有请求域名，列出名单给客户端。另外，像地图定位这种请求，ios9以后是强制要求https的。
（11）版权，证书。如果使用到了第三方资源，必须提供相应的版权说明。例如影视资源，音乐资源，小说资源等。
（12）下载，如果使用了下载功能，必须得到资源方授权，否则也会被拒。
一些解决方案：
1，为可能有审核歧义的功能做隐藏开关，由后台控制。
2，使用企业包，因为审核时间不确定，可以先发布企业包给客户使用。

7,性能
(1)发现一些画圆角的地方使用了
xxx.layer.masksToBounds = YES;
xxx.layer.cornerRadius = 3;
这种方式会频繁绘制，影响ui性能，需要使用其他方式替换。
(2)一些地方读取图片使用了
[UIImage imageWithContentsOfFile:path];
这种方式是直接从磁盘读取图片，影响性能。
需要替换为
[UIImage imageNamed:@“xxx”];
这种方式会从缓存读取图片，提高性能。
（3）自测时候使用性能查看工具instruments，分析app性能情况。

8,需求细化
发现需求里面很少描述数据的边界条件，
例如如没有数据时候显示什么,用户可输入数据的范围限制，当从后台下载图片的过程中，应该使用一张默认占位图展示，等。这都属于非闭环设计，应该考虑全面用户遇到的任何场景。

9,项目例会
咱们每周都有一个开发小组的总结会议。
不知道是否有一个整个项目组的例会,包括后台，前端，客户端，运营，产品，市场等所有部门的组长一起开会，互相汇报本周项目进展，这样各个部门之间的信息同步，有利于各自对于项目整体的状态了解，增加部门之间的沟通，对于各部门所需资源可以及时提供支持，遇到问题及时提供帮助。会议所提到的问题记录成为会议纪要，通过邮件方式抄送各个小组，大家各自跟踪邮件中提到的问题，及时解决，下周例会汇报解决进展，以及遇到的新的问题。


10,周报
咱们的周报都是发送和汇报给组长一人，我建议组长汇总后邮件抄送给各个同事，用邮件的方式可以有效的记录和追踪问题，抄送给同事可以使大家互相了解问题，互相提供支持和帮助。

11,git使用
app代码方面，建议使用主分支和开发分枝两个分支。
开发分枝用于平时开发，当需要发布测试包或生产包，则把代码合并入主分支，然后主分支在各个阶段记录标签，这样保证主分支上始终都是功能完整的代码，而且当发布版本后，在开发新版本的时候，需要紧急修复线上版本，可以切换到主分支修改，而不影响当前新版本开发的代码。

资源方面，建立一个app资源库，用于备份资源。
例如：
（1）安装包，我们把安装包放入git有个好处，就是放上去后，可以直接提供下载链接给测试或产品人员使用，而非一对一传送文件那么麻烦。
（2）调试文件，ios每次打包后会有个调试文件，对应于安装包，当app有崩溃的时候，使用调试文件和崩溃日志可以很快定位到崩溃位置。
（3）release文档，记录发布包的功能改动或bug修复，方便测试人员针对性的测试。

12,按阶段提交测试包。
由于第版本属于大版本，工期长，需求多。如果积累到所有功能开发完成再测试，肯定会有很多bug，为了减轻后期负担，建议前期按阶段提交测试包给测试部门和产品部门检查，将一些问题在前期就暴露出来，而非都积压在后期。

13,beta环境
咨询过同事，咱们的后台环境分为开发，测试，生产三个环境。
我建议在测试和生产之间增加一个beta环境。
目的主要有两个：
1，后台做环境切换的时候会有很多配置信息需要配置，例如url路径，默认参数等等。
如果没有beta环境作为中间过渡的话，直接从测试环境切换到生产环境可能会遇到一些问题，从而影响上线进度。因为到切生产环境的时候，基本就是马上要上线的时候，时间非常紧张。
2，beta使用生产环境的真实数据，而非测试数据。因为测试环境的数据是测试数据，虽然可以随意修改，但是不利于测试数据，因为不是真实的生产环境数据，只是模拟数据，很难测试数据的正确性。而生产环境在上线之前又是无法直接测试的。所以beta环境的作用就是使用真实数据，帮助测试来检验数据的正确性。



14,数据映射

15，图片上传

16,联调时间

17,pch

18,提前审核

19,埋点，专门产品经理

20，网络请求日志打印

21，请求接口域名管理，环境配置

22,占位图

23,rap

24,不支持post

25,jira平台，不支持bug解决分类（by design/fix,dumplicate,delay,not reproduced）,不支持版本号